#include <stdio.h>
#include "platform.h"
#include "int.h"
#include "osci.h"
#include "uart.h"
#include "xil_printf.h"


#define MAX_PACKET_SIZE 255
#define RAM_SIZE 32*MAX_PACKET_SIZE


void process(u8 header1, u8 header2);

int main() {
    init_platform();

    // Initialize the interrupts
    INT_init();
    OSCI_Init();
    UART_Init();

    INT_enable();

    while (1) {
    	// wait for header
    	u8 header1 = UART_Read();
    	u8 header2 = UART_Read();

    	process(header1, header2);
    }

    cleanup_platform();
    return 0;
}

void process(u8 header1, u8 header2) {
	// For PC software
	if ((header1 & 0x80) != 0) {
		return;
	}

	u8 tag = header1 & 0x0F;

	if (tag == 0b001) { // START
		// start Osci
		OSCI_StartAcquire();

		// wait for data
		while (OSCI_DataReady() == 0);

		static u8 buffer[MAX_PACKET_SIZE];
		buffer[0] = 0b10000010;
		buffer[1] = MAX_PACKET_SIZE; // ToPC and Acquiere, length

		// read ram from fpga, and sent to PC
		u32 readData = 0;
		while (readData < RAM_SIZE) {
			OSCI_ReadData(&buffer[2], readData, MAX_PACKET_SIZE - 2);

			UART_Write(buffer, sizeof(buffer)/sizeof(buffer[0]));

			readData += MAX_PACKET_SIZE - 2;
		}
	}
	else if (tag == 0b1000) { // TriggerEdge
    	u8 thr0 = UART_Read();
    	u8 thr1 = UART_Read();
    	uint8_t sel = (uint8_t)UART_Read();
    	uint8_t mode = (uint8_t)UART_Read();

    	int16_t threshold = thr0 << 8 | thr1;
    	OSCI_SetTriggerCfg(threshold, sel, mode);
	}
}
