#include "int.h"


/**
 ******************************************************************************
 * Function prototypes
 ******************************************************************************
 **/
void XOSCI_InterruptClear(XOSCI * InstancePtr, u32 Mask);

/**
 ******************************************************************************
 * This is the interrupt handler routine for the OSCI .
 ******************************************************************************
 **/
void OSCI_Handler(void *CallbackRef) {
	uint32_t address = 0;
	INT_disable();

	address = XOSCI_DiscreteRead(&OSCIInst, 1);
	BMP_setFast(address, (uint16_t) XOSCI_DiscreteRead(&OSCIInst, 2));

	INT_enable();
}

int OSCI_Init() {
	int Status;

	/* Initialize the OSCI driver. If an error occurs then exit */
	Status = XOSCI_Initialize(&OSCIInst, OSCI_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the specific
	 * interrupt processing for the device.
	 */
	Status = INT_connect(OSCI_INTERRUPT_ID, (XInterruptHandler) OSCI_Handler,
			(void *) &OSCIInst);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable the OSCI channel interrupts so that push button can be
	 * detected and enable interrupts for the OSCI device
	 */

	//XOSCI_InterruptGlobalEnable(&OSCIInst);
	// Change the priority
	//INT_setPriorityTriggerType (OSCI_INTERRUPT_ID, 0, 1);
	/*
	 * Enable the interrupt for the OSCI
	 */
	//INT_enableInterrupt(OSCI_INTERRUPT_ID);
	// Success
	return XST_SUCCESS;
}

/**
 ******************************************************************************
 * Enables the OSCI interrupts
 ******************************************************************************
 **/
void OSCI_EnableInterrupt() {
	/* Enable interrupts after setup interrupt */
	XOSCI_InterruptEnable(&OSCIInst, 0xFF);

	/* Clear the Interrupt */
	XOSCI_InterruptClear(&OSCIInst, 0xFF);
}
