#include <stdio.h>
#include "platform.h"
#include "int.h"
#include "osci.h"
#include "uart.h"
#include "xil_printf.h"


#define MAX_PACKET_SIZE 128
 //2^13
#define RAM_SIZE 8192


void process(u8 header1, u8 header2);

int main() {
    init_platform();

    // Initialize the interrupts
    INT_init();
    OSCI_Init();
    UART_Init();

    INT_enable();


    while (1) {
    	// wait for header
    	u8 header1 = UART_Read();
    	u8 header2 = UART_Read();

    	process(header1, header2);
    }

    cleanup_platform();
    return 0;
}

void process(u8 header1, u8 header2) {
	// For PC software
	if ((header1 & 0x80) != 0) {
		return;
	}

	u8 tag = header1 & 0x0F;

	if (tag == 0b001) { // START
		// start Osci
		OSCI_StartAcquire();

		// wait for data
		while (OSCI_DataReady() == 0);

		// AcquireInfo
		static u8 packetBuffer[2+4];
		u16 triggerIndex = OSCI_GetTriggerIndex();
		packetBuffer[0] = 0b10000011; // ToPC and AcquireInfo
		packetBuffer[1] = 2; // length in word
		packetBuffer[2] = RAM_SIZE >> 8;
		packetBuffer[3] = RAM_SIZE & 0x00FF;
		packetBuffer[4] = triggerIndex >> 8;
		packetBuffer[5] = triggerIndex & 0x00FF;
		UART_Write(packetBuffer, sizeof(packetBuffer)/sizeof(packetBuffer[0]));

		// Acquire
		static u8 ramBuffer[2+RAM_SIZE*2];
		for (int i = 2; i < RAM_SIZE; i += 2) {
			u16 adcValue = OSCI_ReadByte(i);
			ramBuffer[i] = adcValue >> 8;
			ramBuffer[i+1] = adcValue & 0x00FF;
		}
		UART_Write(ramBuffer, sizeof(ramBuffer)/sizeof(ramBuffer[0]));
	}
	else if (tag == 0b1000) { // TriggerEdge
    	u8 thr0 = UART_Read();
    	u8 thr1 = UART_Read();
    	uint8_t sel = (uint8_t)UART_Read();
    	uint8_t mode = (uint8_t)UART_Read();

    	uint16_t threshold = thr0 << 8 | thr1;
    	OSCI_SetTriggerCfg(threshold, sel, mode);
	}
}
